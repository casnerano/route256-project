// Code generated by MockGen. DO NOT EDIT.
// Source: cart.go
//
// Generated by this command:
//
//	mockgen -destination=mock/cart.go -source=cart.go
//
// Package mock_cart is a generated GoMock package.
package mock_cart

import (
	context "context"
	reflect "reflect"
	model "route256/cart/internal/model"
	worker_pool "route256/cart/internal/service/cart/worker_pool"

	gomock "go.uber.org/mock/gomock"
)

// MockWorkerPool is a mock of WorkerPool interface.
type MockWorkerPool struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerPoolMockRecorder
}

// MockWorkerPoolMockRecorder is the mock recorder for MockWorkerPool.
type MockWorkerPoolMockRecorder struct {
	mock *MockWorkerPool
}

// NewMockWorkerPool creates a new mock instance.
func NewMockWorkerPool(ctrl *gomock.Controller) *MockWorkerPool {
	mock := &MockWorkerPool{ctrl: ctrl}
	mock.recorder = &MockWorkerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerPool) EXPECT() *MockWorkerPoolMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockWorkerPool) Run(ctx context.Context, tasks <-chan worker_pool.Task, proc worker_pool.Processor) <-chan *worker_pool.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, tasks, proc)
	ret0, _ := ret[0].(<-chan *worker_pool.Result)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockWorkerPoolMockRecorder) Run(ctx, tasks, proc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorkerPool)(nil).Run), ctx, tasks, proc)
}

// MockPIMClient is a mock of PIMClient interface.
type MockPIMClient struct {
	ctrl     *gomock.Controller
	recorder *MockPIMClientMockRecorder
}

// MockPIMClientMockRecorder is the mock recorder for MockPIMClient.
type MockPIMClientMockRecorder struct {
	mock *MockPIMClient
}

// NewMockPIMClient creates a new mock instance.
func NewMockPIMClient(ctrl *gomock.Controller) *MockPIMClient {
	mock := &MockPIMClient{ctrl: ctrl}
	mock.recorder = &MockPIMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPIMClient) EXPECT() *MockPIMClientMockRecorder {
	return m.recorder
}

// GetProductInfo mocks base method.
func (m *MockPIMClient) GetProductInfo(ctx context.Context, sku model.SKU) (*model.ProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductInfo", ctx, sku)
	ret0, _ := ret[0].(*model.ProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductInfo indicates an expected call of GetProductInfo.
func (mr *MockPIMClientMockRecorder) GetProductInfo(ctx, sku any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductInfo", reflect.TypeOf((*MockPIMClient)(nil).GetProductInfo), ctx, sku)
}

// MockLOMSClient is a mock of LOMSClient interface.
type MockLOMSClient struct {
	ctrl     *gomock.Controller
	recorder *MockLOMSClientMockRecorder
}

// MockLOMSClientMockRecorder is the mock recorder for MockLOMSClient.
type MockLOMSClientMockRecorder struct {
	mock *MockLOMSClient
}

// NewMockLOMSClient creates a new mock instance.
func NewMockLOMSClient(ctrl *gomock.Controller) *MockLOMSClient {
	mock := &MockLOMSClient{ctrl: ctrl}
	mock.recorder = &MockLOMSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLOMSClient) EXPECT() *MockLOMSClientMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockLOMSClient) CreateOrder(ctx context.Context, userID model.UserID, items []*model.Item) (model.OrderID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, userID, items)
	ret0, _ := ret[0].(model.OrderID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockLOMSClientMockRecorder) CreateOrder(ctx, userID, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockLOMSClient)(nil).CreateOrder), ctx, userID, items)
}

// GetStockInfo mocks base method.
func (m *MockLOMSClient) GetStockInfo(ctx context.Context, sku model.SKU) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockInfo", ctx, sku)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockInfo indicates an expected call of GetStockInfo.
func (mr *MockLOMSClientMockRecorder) GetStockInfo(ctx, sku any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockInfo", reflect.TypeOf((*MockLOMSClient)(nil).GetStockInfo), ctx, sku)
}
