// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -destination=mock/repository.go -source=repository.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	model "route256/cart/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockCart is a mock of Cart interface.
type MockCart struct {
	ctrl     *gomock.Controller
	recorder *MockCartMockRecorder
}

// MockCartMockRecorder is the mock recorder for MockCart.
type MockCartMockRecorder struct {
	mock *MockCart
}

// NewMockCart creates a new mock instance.
func NewMockCart(ctrl *gomock.Controller) *MockCart {
	mock := &MockCart{ctrl: ctrl}
	mock.recorder = &MockCartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCart) EXPECT() *MockCartMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCart) Add(ctx context.Context, userID model.UserID, sku model.SKU, count uint32) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, sku, count)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockCartMockRecorder) Add(ctx, userID, sku, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCart)(nil).Add), ctx, userID, sku, count)
}

// DeleteBySKU mocks base method.
func (m *MockCart) DeleteBySKU(ctx context.Context, userID model.UserID, sku model.SKU) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBySKU", ctx, userID, sku)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBySKU indicates an expected call of DeleteBySKU.
func (mr *MockCartMockRecorder) DeleteBySKU(ctx, userID, sku any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBySKU", reflect.TypeOf((*MockCart)(nil).DeleteBySKU), ctx, userID, sku)
}

// DeleteByUser mocks base method.
func (m *MockCart) DeleteByUser(ctx context.Context, userID model.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUser indicates an expected call of DeleteByUser.
func (mr *MockCartMockRecorder) DeleteByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUser", reflect.TypeOf((*MockCart)(nil).DeleteByUser), ctx, userID)
}

// FindByUser mocks base method.
func (m *MockCart) FindByUser(ctx context.Context, userID model.UserID) ([]*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUser", ctx, userID)
	ret0, _ := ret[0].([]*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUser indicates an expected call of FindByUser.
func (mr *MockCartMockRecorder) FindByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUser", reflect.TypeOf((*MockCart)(nil).FindByUser), ctx, userID)
}
